<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
    <title type="text" xml:lang="en">Ebru Gulec</title>
    <link type="application/atom+xml" rel="self" href="http://localhost:3000/atom.xml"/>
  
  <link href="http://localhost:3000/"/>
  <id>http://localhost:3000/</id>
  <updated>2017-05-24T00:18:02Z</updated>
  <author>
    <name>Ebru Gulec</name>
    <email>glcebru94@gmail.com</email>
  </author>
  <rights type="text">Copyright © 2017 Ebru Gulec. All rights reserved.</rights>
  
  <entry>
  <title type="text">Fikrimuhal Stajım Bitti</title>
  <link rel="alternate" type="text/html" href="http://localhost:3000/fikrimuhal-stajim.html" />
  <id>http://localhost:3000/fikrimuhal-stajim</id>
  <published>2016-09-07T01:07:19Z</published>
  <updated>2016-09-07T01:07:19Z</updated>
  <content type="html"><![CDATA[ <p>Yaklaşık olarak 2 buçuk aydır <a href="http://fikrimuhal.com/">Fikrimuhal</a> de devam ettiğim stajımı 26 Ağustos tarihi itibari ile
hiç istemesemde noktaladım. <a href="http://fikrimuhal.com/">Fikrimuhal</a>’in bana kattığı hiçbir şeyi unutmayacağım.
Hatta bir süre geçtikten sonra <a href="http://fikrimuhal.com/">Fikrimuhal</a> hayatımın dönüm noktalarından birisiydi diyeceğime eminim.
O kadar çok şey öğrendim ki orada; hayata ve kendime dair o kadar çok şey keşfetme fırsatı buldum ki
anlatmak ile bitmeyecek türden. Ancak her güzel şeyin bir sonu olduğu gibi stajımda bitti malesef.</p>

<p><a href="http://fikrimuhal.com/">Fikrimuhal</a>’in her şeyini ayrı ayrı özleyeceğim aslında. Özellikle Ahmet Emre Aladağ’ın o hiç eksik olmayan
güleryüzlü enerjisini ve klavyesinin o imrendiğim tık tık seslerini, gazilyon tane işi olan ve kendisini
örnek aldığım Ilgaz Şumnuluyu, bilgisayarının cpu’su çok yüksek olan ve her şeyi not alan Fatih Mehmet Güler’i,
DigiTurk de çalışan ve kendisi ile çok fazla iletişimim olmasa da yine kendime örnek aldığım insanlardan biri 
olan Şükrü Hasdemir’i, sonradan Fikrimuhal’e katılan yanında her daim kolonya taşıyan ve olaylara verdiği
tepkiler ile ofisde bizi gülümseten Mesut Yiğit’i, son olarak da kruvasan sevdalısı, esprileri ile şok
etkisi yaratan Mücahit Kantepe’yi(nam-ı değer diğer stajyer). Anlayacağınız o güzel çalışma ortamını,
insanları, arada sırada su akıtan klimayı hatta ve hatta lavabodaki kötü kokulu sarı el sabununu.
Herşeyiyle özleyeceğim bana birbirinden muhteşem deneyimler katan <a href="http://fikrimuhal.com/">Fikrimuhal</a>’i.
Umarım günün birinde bu güzel insanlarla tekrardan aynı ortamda çalıma fırsatı bulabilirim.
Ve umarım birgün onlar kadar başarılı olabilirim.</p>

<p>Dipnot: Stajda geçirdiğim her günü ve öğrendiğim her şeyi  not almaya çalıştım. Aldığım notları düzenledikten sonra en kısa zamanda blogumda paylaşacağım.</p>
 ]]></content>
</entry>


  <entry>
  <title type="text">React.createClass ve extends React.Component Arasındaki Farklar</title>
  <link rel="alternate" type="text/html" href="http://localhost:3000/react-classes.html" />
  <id>http://localhost:3000/react-classes</id>
  <published>2016-07-21T00:00:00Z</published>
  <updated>2016-07-21T00:00:00Z</updated>
  <content type="html"><![CDATA[ <p>React da bir componet’ı oluşturmanın birden farklı yolu vardır. Temelde React.createClass ve extends React.Component aynı işlemi farklı şekillerde yaparlar.</p>

<p>React da geleneksel olarak bir component oluşturmak için React.createClass methodu kullanılır. ES6 sınıf yapısı ile de component oluşturulabilir.</p>

<p>Bir component oluşturmak için uygulanan bu iki yöntemde bazı farklılıklar mevcuttur. Bunlardan bazıları;</p>

<h3 id="syntax-farklılıkları">Syntax Farklılıkları:</h3>

<h4 id="reactcreateclass">React.createClass</h4>

<p>Burada const keyword’ü ile bir React sınıfı oluşturulmuş. Tipik base component tanımlamalarında render fonksiyonu önemli bir role sahiptir.</p>

<p>İlk olarak aşağıdaki iki kod örneği arasındaki syntax farklılıklarını inceleyebilirsiniz.</p>

<script src="https://gist.github.com/GlcEbru/dbf756c419567b67161e6390debbd8b4.js"></script>

<h4 id="reactcomponent">React.Component</h4>

<p>Yukarıdaki React.createClass tanımlamasını ele alıp, onu ES6 sınıfını kullanarak yeniden düzenleyebiliriz.</p>

<script src="https://gist.github.com/GlcEbru/e775ecc855df55720a08e220509145c0.js"></script>

<p>JavaScript açısından bakıldığında şuanda ES6 sınıflarını kullanıyoruz. Henüz bütün tarayıcıların ES6’yı desteklememeleri sebebiyle yazdığımız kodların ES6 dan ES5’ e babel gibi bir compiler aracılığıyla dönüştürülmesi gerekiyor.</p>

<h3 id="state-farklılıkları">State Farklılıkları:</h3>

<h4 id="reactcreateclass-1">React.createClass</h4>

<p>React da props bileşenlerindeki değişimleri izlemek için state adında bir nesne bulunmaktadır. Bu state’in ilk değerini vermek için getInitialState adında bir metod yazmamız gerekli.</p>

<script src="https://gist.github.com/GlcEbru/ba825b6c6fd674dc09dbbcb9d7d33a62.js"></script>

<h4 id="reactcomponent-1">React.Component</h4>

<p>React.Component’ın constructor özelliğini kullanarak kolay bir şekilde bütün stateleri başlatabiliriz.</p>

<script src="https://gist.github.com/GlcEbru/2f97982528bb0a00fc6c28155c5dd7d5.js"></script>

<h3 id="this-farklılıkları">“this” Farklılıkları:</h3>

<h4 id="reactcreateclass-2">React.createClass</h4>

<p>React.createClass otomatikmen this keywordüne kendi instance’ını bağlar. ES6 class yapısı ile yapılırsa bu işlemi manuel yapmak gereklidir.</p>

<script src="https://gist.github.com/GlcEbru/589891e3dd0fd40458826809d1fad917.js"></script>

<h4 id="reactcomponent-2">React.Component</h4>

<p>Buradaki this null dur çünkü component’ın instance’ı bağlanmamıştır.</p>

<script src="https://gist.github.com/GlcEbru/24052d69c9424a803f2225f5e7303c93.js"></script>

<p>Doğru içeriği bağlamak için birkaç farklı yöntem kullanabiliriz. Aşağıda inline olarak nasıl bağlayabileceğimizi görebilirsiniz.</p>

<script src="https://gist.github.com/GlcEbru/31e3cee7734b42d9f84fea57a5fdd1fe.js"></script>

<p>Alternatif olarak constructor’ın içerrisindeki this.handleClick bağlamını değiştirebiliriz.</p>

<script src="https://gist.github.com/GlcEbru/53f606ea225277c94f193c6a60b211d6.js"></script>

<h3 id="proptypes-ve-getdefaultprops">propTypes ve getDefaultProps:</h3>

<p>Component’a property bağlamak için kullanılır. Default değerler ile gönderilmek istendiğinde getDefaultProps()  kullanılır.</p>

<h4 id="reactcreateclass-3">React.createClass</h4>

<p>React.createClass bir fonksiyondur. Çeşitli parametreler alır. Bu parametrelere fonksiyonun prop type’ını, mixins’ini verebiliriz. Ancak render’ı kesinlikle vermemiz gerekli. Diğer parametreleri istersek verebiliriz. Sonunda bu parametrelere bağlı olarak component classında bir instance döndürür.</p>

<script src="https://gist.github.com/GlcEbru/6df95b3e01022778d6264bf38ed3187d.js"></script>

<h4 id="reactcomponent-3">React.Component</h4>

<p>Eğer ES6 ile component oluşturma işlemini gerçekleştirirsek parametre vermek yerine sınıfa sınıfınismi.propertismi şeklinde property ekleyebiliriz.</p>

<script src="https://gist.github.com/GlcEbru/2d918d35de9d13232b54524c6a662107.js"></script>

<h3 id="mixins">Mixins:</h3>

<p>Componentlara dışarıdan fonksiyon, property gibi özellikleri bağlamak için kullanılır.</p>

<h4 id="reactcreateclass-4">React.createClass</h4>

<script src="https://gist.github.com/GlcEbru/65cf3d740c31f261826b3c23f60ff7c9.js"></script>

<h4 id="reactcomponent-4">React.Component</h4>

<p>ES6 sınıfları mixins’i desteklememektedir.</p>

<p><a href="https://toddmotto.com/react-create-class-versus-component/#reactcomponent">Kaynak</a></p>

<p>Yardım ve desteklerinden dolayı <a href="https://mesutyigit.weebly.com">Mesut Yiğit’ e</a> çok teşekkürler.</p>
 ]]></content>
</entry>


  <entry>
  <title type="text">Scala Sınıflar(Classes) ve Nesneler(Objects)-3</title>
  <link rel="alternate" type="text/html" href="http://localhost:3000/Scala-S%C4%B1n%C4%B1flar(Classes)-ve-Nesneler(Objects)-3.html" />
  <id>http://localhost:3000/Scala-Sınıflar(Classes)-ve-Nesneler(Objects)-3</id>
  <published>2016-06-06T14:07:19Z</published>
  <updated>2016-06-06T14:07:19Z</updated>
  <content type="html"><![CDATA[ <p>–Sınıfları ve objeleri karışıklık olmadan kullanmamızın yolu onları organize etmek yani onları bir “package” içerisinde saklamaktır. Yazdığımız kodların en başına hangi paketi kullanacağımızı belirtiriz.</p>

<p>package progfun.examples 
object Hello { … }</p>

<p>Burada Hello objesini ima ettiğimizde aslında nitelendirilmiş adı olan progfun.examples.Hello ifadesinden bahsediyoruz. Örneğin Hello programını command line ile çalıştırdığımızda çalıştırdığımızda;</p>
<blockquote>
  <p>scala  progfun.examples.Hello</p>
  <blockquote>
    <p>Bir “package” içerisinde bir başkasını kullanabiliriz. Örneğin elimizde stcratch adlı bir objemiz var. Ve biz bu objemizin içerisinde b,r önceki yazımda bahsettiğim rasyonel sayılar objesini kullanmak istiyoruz. Bunu kullanabilmek için Rational sınıfının hangi “package içerisinde olduğunu bilmeliyiz ve kullanmak istediğimiz zaman “week3.Rational” şeklinde belirtmeliyiz.</p>
  </blockquote>
</blockquote>

<script src="https://gist.github.com/GlcEbru/0fa233b4ca7665e6fe396c0d6d4dfcf7.js"></script>

<p>Burada şöyle bir can sıkıcı durum var. Biz her “Rational” sınıfını kullanmak istediğimizde sınıfımızın önüne “week3” ifadesini getirmek zorundayız. Bu tekrar eden durumu önlemek için “Rational” sınıfının bulunduğun package’ ı import ederiz.</p>

<script src="https://gist.github.com/GlcEbru/d5e79383274c7d446b009d1c4d1401cd.js"></script>

<p>Paketleri import yani kullandığımız programa dahil etmenin birkaç yolu vardır. Yukarıdaki “Import week3.Rational” ifadesi sadece “Rational” sınıfını, kullanılan programa dahil etmiştir. Bütün “week3” paketini  import etmek istersek “_” ifadesini kulanırız.</p>

<script src="https://gist.github.com/GlcEbru/21ffb3379c06dfa45962aee4b6d4ce28.js"></script>

<p>Herhangi bir Scala programında otomatik olarak import edilen bazı elemanlar vaardır. Bunlar;
▶Scala package’ın büyün üyeleri
▶ java.lang package’ın büyün üyeleri
▶ scala.Predef. Objesinin tekil bütün üyeleri</p>

<p>Bazı tip ve fonksiyonların tam olarak nitelenmiş isimleri:
Int              scala.Int 
Boolean      scala.Boolean 
Object            java.lang.Object 
require         scala.Predef.require 
assert           scala.Predef.assert</p>

<p>http://www.scala-lang.org/files/archive/api/current/</p>

<p>adresini kullanarak standart Scala kütüphaneleriini öğrenebilirsiniz.</p>

<h2 id="traits">Traits</h2>
<p>Trait içinde sadece kendisinden türeyen sınıfların içini doldurmak zorunda olduğu içi boş metod tanımlarının yapıldığı bir yapıdır. Kısacası kendisini kullanacak sınıflar için yerine getirilmesi gereken metodları belirtir.
-Scala Javada olduğu gibi yanlızca bir “superclass” bulundurabilir. 
-Abstract class gibidir ancak trait tanımlarken, tanımlamamızın önüne “trait” anahtar kelimesini getiririz.</p>

<script src="https://gist.github.com/GlcEbru/590a7f55d6309c53eb233da71eef2744.js"></script>

<p>-Traitlerin içindeki metodlar sadece metod imzasından ibaret olabilirler. ayrıca trait constructorları parametre almazlar. 
-Traitlerin içindeki metodlar metod implementasyonunu da içerebilirler. bu yönüyle abstract classlara benzer.
-Sınıflar, nesneler ve traitler en çok bir sınıftan miras alabilir fakat isteğe bağlı olarak birden fazla trait alabilir.</p>

<p>class Square extends Shape with Planar with Movable …</p>

<p>-Traitler Javadaki interfacelere benzerler fakat daha güçlülerdir çünkü fields ve concrete metodlarını içerirler. İnterfaceler yanlızla abstract metodlarını içerir. 
-Kısaca özetlemiş olursak traitler geliştirdiğimiz yazılımda aynı kavramın birden farklı şekilde uygulandığında bu kavramı soyutlayarak kodun esnekliğini,okunulabilirliğini arttırmak ve değişimin etkisini en aza indirmek için kullanılan yapılardır.</p>
 ]]></content>
</entry>


  <entry>
  <title type="text">Scala Sınıflar(Classes) ve Nesneler(Objects)</title>
  <link rel="alternate" type="text/html" href="http://localhost:3000/Scala-S%C4%B1n%C4%B1flar(Classes)-ve-Nesneler(Objects).html" />
  <id>http://localhost:3000/Scala-Sınıflar(Classes)-ve-Nesneler(Objects)</id>
  <published>2016-06-05T14:07:19Z</published>
  <updated>2016-06-05T14:07:19Z</updated>
  <content type="html"><![CDATA[ <p>Scala fonksiyonel bir dil olmasına rağmen Object Oriented mantığınada izin verir. 
Yani scala da sınıflar oluşturabilir ve bu sınıflardan yeni nesneler türetebiliriz. 
Örneğin x/y şeklindeki bir rasyonel ifadeyi saklamak istediğimizi varsayalım. 
Bunu bir sınıf yardımı ile yapabiliriz.</p>

<script src="https://gist.github.com/GlcEbru/b2dd32b27c49cf2e0b0b9a09908005e6.js"></script>

<p>Scala tür isimlerini ve değerlerini farklı isim uzaylarında saklar. 
Bu sebepden aralarında çakışma olmaz.</p>

<p>Class veri türünden örneklenen değerler Obje olarak isimlendirilir. 
Scalada yeni bir obje üretmek için new ön ekini kullanırız.</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="k">new</span> <span class="nx">Rational</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span></code></pre></figure>

<p>Böylece Raional veri tipinde yeni bir eleman elde etmiş oluruz. İlk parametre Rational sınıfındaki 
numer = x değerine karşılık gelirken ikinci parametre ise denom = y değerine karşılık gelir.</p>

<p>Oluşturduğumuz nesneyi bir değişkene atayalım ve örneklediğimiz nesnenin verilerine bu değişken
aracılığı ile ulaşalım.</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">val</span> <span class="nx">x</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Rational</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
<span class="nx">x</span><span class="p">.</span><span class="nx">numer</span>     <span class="o">&gt;&gt;</span><span class="mi">1</span>
<span class="nx">x</span><span class="p">.</span><span class="nx">denom</span>     <span class="o">&gt;&gt;</span><span class="mi">2</span></code></pre></figure>

<p>x Rational tipinde bir değişken. Yani numer ve denom adlı fonksiyonları içeriyor. 
Nokta(.) ifadesi x’ in içerisindeki fonksiyonlara ulaşmamızı sağlıyor.</p>

<p>Oluşturduğumuz sınıf ile ilgili birkaç örnek yapalım. Örneğin iki rasyonel ifadeyi toplayalım.
Bunun için;</p>

<script src="https://gist.github.com/GlcEbru/766a4bfbac8a590f0193d334378a4030.js"></script>

<p>addRational adlı fonsiyonu yazabiliriz. Bu fonksiyon r ve s adında iki parametre alır.
Yanlız burada şöyle bir problemimiz var. Yazdığımız bu fonksiyon bize dönen değeri x/y 
şeklinde vermeyecektir. İfadeyi rasyonel sayı formatına getirmek için yeni bir fonksiyon tanımlayalım.</p>

<script src="https://gist.github.com/GlcEbru/2c2aa4551d3bf4317ba7bf0837afc201.js"></script>

<p>Ve ifadeyi test edelim.</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">makeString</span><span class="p">(</span><span class="nx">addRational</span><span class="p">(</span><span class="k">new</span> <span class="nx">Rational</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">),</span> <span class="k">new</span> <span class="nx">Rational</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">)))</span></code></pre></figure>

<p>işlemin sonunda bize 7/6 cevabını verecektir.</p>

<p>Sınıfın içerisindeki fonksiyonlar method olarak isimlendirilir. 
Biraz önceki iki rasyonel sayıyı toplama işlemini bir sınıf içerisinde yapabiliriz. 
Bu programımıza daha derli toplu bir görüntü sağayacaktır. Hemde Scala mantığı 
ile hareket etmiş olacağız.</p>

<script src="https://gist.github.com/GlcEbru/170ef611814f9fe2cb9a7bc48160a8db.js"></script>

<p>Burada dikkatinizi birşey çekmiş olmalı. Bizim Rational sınıfımız iki değer içeriyor ancak 
add adlı methodda tek parametre var. Peki diğer parametremiz nerde? Diğer arametremiz programımızın
“object” kısmından gönderiliyor. Add fonksiyonunun sol kısmındaki ki “x” bizim gerçek rasyonel sayımız.</p>

<script src="https://gist.github.com/GlcEbru/3276f97cff9740a907a712c8f1081339.js"></script>

<p>Hemen bir örnek daha yapacak olursak. Sınıf içerisinde “neg” adlı bir fonksiyon tanımlayalım.
Bu fonksiyon bize verilen rasyonel sayının negatifini döndürsün.
Ve verdiğimiz x,y,z, değerleri ile x-y-z işlemini gerçekleştirsin.</p>

<script src="https://gist.github.com/GlcEbru/a05f1b8544c2a4d4dff233cd26b7851b.js"></script>

<p>Programı çalıştırdığımızda sonuç = -79/42 dir.</p>

<p>Yukarıdaki rasyonel sayıları toplamak için yazdığımız kodda eğer y.add(y) ifadesini ile işlem yaparsak bize “70/49” değerini dönderecektir. Ama bizim gerçek sonucumuz “10/7” olacaktır. Verilen değerler ile doğru sonuç elde etmek için ek bir fonksiyona ihtiyaç duyarız. Bu fonksiyonun amacı ortak bölenleri bulup sonucu en sade hale getirmektir.</p>

<script src="https://gist.github.com/GlcEbru/b0c9069ce30ea342826fc89921ac23a5.js"></script>

<p>Bir sınıfın veri veya fonksiyonlarınıdan oluşan üyelerine erişimi kısıtlayabiliriz. Eğer bir kısıtlama işlemi yapmak istiyorsak fonksiyonların ya da değişkenlerin başına “Private” ifadesini ekleriz.
Böylece istediğimiz verilerin istenilmeyen değerler almasını önlemiş oluruz.</p>

<p>Gcd fonksiyonunu private tanımladık çünkü sadeleştirme işlemini yanlızca sınıf içerisinde yapmak istiyoruz. Böylece dışarıdan gönderilen değerler bu fonksiyondan etkilenmiyor.</p>

<p>Gcd fonksiyonunu bir değişkene atamak zorunda değildik. Yani işlemi şu şekilde de yapabilirdik.</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="kr">class</span> <span class="nx">Rational</span><span class="p">(</span><span class="nx">x</span><span class="err">:</span><span class="nx">Int</span><span class="p">,</span> <span class="nx">y</span><span class="err">:</span><span class="nx">Int</span><span class="p">)</span>
<span class="p">{</span>

<span class="kr">private</span> <span class="nx">def</span> <span class="nx">gcd</span><span class="p">(</span><span class="nx">a</span><span class="err">:</span> <span class="nx">Int</span><span class="p">,</span> <span class="nx">b</span><span class="err">:</span><span class="nx">Int</span><span class="p">)</span><span class="err">:</span> <span class="nx">Int</span> <span class="o">=</span> <span class="k">if</span> <span class="p">(</span><span class="nx">b</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="nx">a</span> <span class="k">else</span> <span class="nx">gcd</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span> <span class="nx">a</span><span class="o">%</span><span class="nx">b</span><span class="p">)</span>
	<span class="nx">def</span> <span class="nx">numer</span> <span class="o">=</span> <span class="nx">x</span> <span class="o">/</span> <span class="nx">gcd</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span><span class="nx">y</span><span class="p">)</span>
	<span class="nx">def</span> <span class="nx">denom</span> <span class="o">=</span> <span class="nx">y</span> <span class="o">/</span> <span class="nx">gcd</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span><span class="nx">y</span><span class="p">)</span>
<span class="p">...</span>
<span class="p">}</span></code></pre></figure>

<p>ancak bu tanımalada her işlem yaptığımızda gcd fonksiyonu tekrar çalışacak ve aynı hesaplamaları tekrar yapacak. Bu da işlemciyi gereksiz yere yormak demek bu sebeple bir değişkene gcd den dönen değeri atadık ve istenildiği zaman kullandık.</p>

<p>Sınıf çerisindeki fonksiyonlar ile ilgili daha fazla örnek yapabiliriz. Mesela iki rasyonel sayının hangisinin maksimum ya da hangisinin minimum olduğunu bulabiliriz.</p>

<script src="https://gist.github.com/GlcEbru/188b3e5b37d049c31aa460dab8f7ec02.js"></script>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">x</span><span class="p">.</span><span class="nx">less</span><span class="p">(</span><span class="nx">y</span><span class="p">)</span> </code></pre></figure>

<p>şeklinde main içerisinden çağırısak bize “true” değerine verecektir.</p>

<p>Burada maksimum değerini bulmak için less fonksiyonunu kullanmak istiyoruz. Bunu yapmamızın yolu çoğu Nesne Yönelimli Programlama dillerinde olduğu gibi “this” ya da “self” önekini kullanmak. This bizim şu anki rasyonel sayımızı temsil eder. 
<script src="https://gist.github.com/GlcEbru/5b2bdcefc757519362e4561e03e289cf.js"></script></p>

<p>less fonksiyonunu “this” kullanarak yazarsak;</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">def</span> <span class="nx">less</span><span class="p">(</span><span class="nx">that</span><span class="err">:</span> <span class="nx">Rational</span><span class="p">)</span> <span class="o">=</span> 
	<span class="k">this</span><span class="p">.</span><span class="nx">numer</span> <span class="o">*</span> <span class="nx">that</span><span class="p">.</span><span class="nx">denom</span> <span class="o">&lt;</span> <span class="nx">that</span><span class="p">.</span><span class="nx">numer</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">denom</span></code></pre></figure>

<p>Dipçe: Diğer programa dillerinde tanımlamalar alfanümerik karakterler ile başlamalı. Ancak Scala da alternatif olarak semboller ile de tanımlanabilir. İki tanımlamanın da arasında sonuç bazında hiçbir fark yoktur.</p>

<script src="https://gist.github.com/GlcEbru/a2ae6adfb1c5f5fe9ecd9c778ce2e0d9.js"></script>

 ]]></content>
</entry>


  <entry>
  <title type="text">Scala Higher Order ve Anonymous Fonksiyonlar, Currying</title>
  <link rel="alternate" type="text/html" href="http://localhost:3000/Scala-Higher-Order-and-Anonymous-Functions-Currying.html" />
  <id>http://localhost:3000/Scala-Higher-Order-and-Anonymous-Functions-Currying</id>
  <published>2016-06-02T18:07:19Z</published>
  <updated>2016-06-02T18:07:19Z</updated>
  <content type="html"><![CDATA[ <h3 id="higer-order-functions">Higer-Order Functions:</h3>
<p>Scala Higer-Order Fonksiyon tanımlamaya izin veir. Fonksiyonları diğer fonksiyonlara parametre olarak gönderebiliriz ya da işlemin sonunda elde ettiğimiz sonuç bir fonksiondur.</p>

<p>Örneğin; iki tam sayı arasındaki sayıların kübünü bulmak istiyoruz.</p>

<script src="https://gist.github.com/GlcEbru/b5cb8dd12580c3fd865faffe9a3483c2.js"></script>

<p>Burada sumCubes’ün içerisinde cube fonksiyonunu çağırmak yerine fonksiyonu direk parametre olarak gönderebiliriz. İfadeyi şu şekilde tanımlarsak;</p>

<script src="https://gist.github.com/GlcEbru/2af8d8eae6bb70039e1fa9396e57e30c.js"></script>

<p>Bu tanımladığımız ifadeyi küp ve faktoriyel bulma ile örneklendirebiliriz.</p>

<script src="https://gist.github.com/GlcEbru/1f41ddf1b949e891156a74554c7fb298.js"></script>

<p>Burada cube ve fact;</p>

<script src="https://gist.github.com/GlcEbru/c4efe1a52f8aabb8033df56eebb8afb8.js"></script>

<p>ifadeleri ile eşleşir.</p>

<p>Fonksiyon Tipi: a =&gt; b ifadesi bize “a” giriş değerini “b” ise sonuç değerini belirtir.</p>

<p>Bu ifadelerde dikkatinizi birşey çekmiş olmalı. Neden birden çok yardımcı fonksiyon tanımladık. Bu tanımlamaları yapmadanda işlemimizi gerçekleştirebilir miyiz? İşte bu kısımda devreye Anonymous Fonksiyonlar giriyor.</p>

<h3 id="anonymous-functions">Anonymous Functions:</h3>

<p>Fonksiyonları bir diğer fonksiyona gönderirken, parametre olarak geçen birçok küçük fonksiyonun oluşmasına sebep olur.
Bu fonksiyonları def kullanarak tanımlamak bazen program yazan kişiye angarya yük olabilir.<br />
Örneğin ekrana “abc” ifadesini yazmak istiyoruz. Bunu iki şekilde yapabiliriz. Birincisi def kullanarak;</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">def</span> <span class="nx">str</span> <span class="o">=</span> <span class="err">“</span><span class="nx">abc</span><span class="err">”</span><span class="p">;</span>
<span class="nx">println</span><span class="p">(</span><span class="nx">str</span><span class="p">)</span></code></pre></figure>

<p>İkinci yol ise direk ifadeyi yazarak.</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">println</span><span class="p">(</span><span class="err">“</span><span class="nx">abc</span><span class="err">”</span><span class="p">)</span></code></pre></figure>

<p>Bu örnekde karakter dizileri değişmez literallerdir. Benzer olarak fonksiyonlarda literaller gibidir isimsiz fonksiyon yazmamıza izin verir. Bu fonksiyonlara Anonymous Functions adı verilir.</p>

<p>Anonymous Functions Syntax:</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="p">(</span><span class="nx">x</span><span class="err">:</span> <span class="nx">Int</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">x</span><span class="o">*</span><span class="nx">x</span><span class="o">*</span><span class="nx">x</span></code></pre></figure>

<p>Burada (x: Int)  ifademizin parametresini , x<em>x</em>x ise esas kısmını oluşturuyor.</p>

<p>Yukarıdaki küp örneğini anonymous fonksiyon şeklinde tekrardan düzenlersek.</p>

<script src="https://gist.github.com/GlcEbru/b40013ea5c1000c84a7da22d7e087d07.js"></script>

<p>Peki biz bu ifadeyi daha sade bir hale getirebilirmiyiz. Tabiki evet.</p>

<h3 id="currying">Currying:</h3>

<p>Amaci bir fonksiyona luzum dahilinde ihtiyaci oldugundan daha az parametre gonderebilmektir.</p>

<script src="https://gist.github.com/GlcEbru/0bef36bb09af3729fafd6713171c28f8.js"></script>

<p>Çoklu Parametre Listesinin Açılımı:</p>

<p>Kullandığımız fonksiyonlar birden çok parametre içeriyorsa bunu currying mantığı kullanarak daha sade hale getirebiliriz.</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">def</span> <span class="nx">f</span><span class="p">(</span><span class="nx">args1</span><span class="p">)....(</span><span class="nx">argsn</span><span class="p">)</span> <span class="o">=</span> <span class="nx">E</span> </code></pre></figure>

<p>Genel olarak fonksiyonara argüman gönderme işlemi bu şekilde yapılır. Eğer n değeri 1 den büyük ise yeni bir fonksiyon tanımlamalıyız;</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">def</span> <span class="nx">f</span><span class="p">(</span><span class="nx">args1</span><span class="p">)...(</span><span class="nx">argsn</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">=</span> <span class="p">{</span><span class="nx">def</span> <span class="nx">g</span><span class="p">(</span><span class="nx">argsn</span><span class="p">)</span> <span class="o">=</span> <span class="nx">E</span><span class="p">;</span><span class="nx">g</span><span class="p">}</span></code></pre></figure>

<p>Daha sade bir şekilde ifadeyi Anonymous Function şekline getirisek;</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">def</span> <span class="nx">f</span><span class="p">(</span><span class="nx">args1</span><span class="p">)....(</span><span class="nx">argsn</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="nx">argsn</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">E</span></code></pre></figure>

<p>İşlemimiz n kez devam ediyor ise;</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">def</span><span class="p">(</span><span class="nx">args1</span><span class="p">)...(</span><span class="nx">argsn</span><span class="o">-</span><span class="mi">1</span><span class="p">)(</span><span class="nx">agsn</span><span class="p">)</span> <span class="o">=</span> <span class="nx">E</span></code></pre></figure>

<p>Bütün parametreleri nested ve anonymous fonksiyon şeklinde yazarız.</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">def</span> <span class="nx">f</span> <span class="o">=</span> <span class="p">(</span><span class="nx">args1</span> <span class="o">=&gt;</span> <span class="p">(</span><span class="nx">args2</span> <span class="o">=&gt;</span> <span class="p">...(</span><span class="nx">argsn</span> <span class="o">=&gt;</span> <span class="nx">E</span><span class="p">)...))</span></code></pre></figure>

<p>Bu tanımlama şekli Currying olarak isimlendirilir.</p>

<p>Hemen ufak bir örnek yapalım. 
Bir fonksiyon tanımlayalım. Bu fonksiyon a ve b arasındaki sayıların karelerini çarpsın.</p>

<script src="https://gist.github.com/GlcEbru/9163ffa5da1f251d91cee4db2c369c1a.js"></script>

<p>Şimdide fact adlı bir fonksiyon tanımlayalım. Bu fonksiyon sayının faktöriyelini alsın ancak product fonksiyonunu kullanarak bunu gerçekleştirsin.</p>

<script src="https://gist.github.com/GlcEbru/33fce929181690f5d16ad950815d58b6.js"></script>

 ]]></content>
</entry>


  <entry>
  <title type="text">Hello Scala!</title>
  <link rel="alternate" type="text/html" href="http://localhost:3000/Hello-Scala.html" />
  <id>http://localhost:3000/Hello-Scala</id>
  <published>2016-05-17T14:07:19Z</published>
  <updated>2016-05-17T14:07:19Z</updated>
  <content type="html"><![CDATA[ <p>Merhabalar kısa bir süre önce Scala’yı öğrenmeye başladım. Türkiye’de ne yazık ki yaygın olarak kullanılmıyor. Bu sebeple bende yabancı kaynaklardan öğrenmeye çalışıyorum(Coursera gibi) Ne kadar yeterli oluyor ne kadar eksik kalıyor o kısım şuan benim için soru işareti ancak zamanla üzerinde çalışarak geliştirilebileceğimi düşünüyorum. Bu yazıyı yazmamın amacı(muhtemelen bir yazı dizisi şeklinde olacak) benim gibi yeni öğrenenlere ya da öğrenmek isteyenlere yardımcı olmak. Burada şunu da belirtmem gerek sanırım; fonksiyonel programlama dünyasına yeni yeni giriş  yaptığım için yazılarımda eksiklikler, hatalar ya da yanlış ifade edilmiş kısımlar olabilir. Lütfen farkettiklerinizi benimle iletişime geçerek düzeltmeme yardımcı olun. Diyerek kısa bir giriş yaptıktan sonra kısaca Scala’nın özelliklerinden bahsedeyim.</p>

<p>-Hem nesne yönelimli hemde fonksiyonel programlama yapılabilen bir dil.</p>

<p>-Scala da herşey objedir.</p>

<p>-Fonksiyonları bir diğer fonksiyona parametre olarak gönderebiliriz ya da iç içe fonksiyonlar yazabiliriz.</p>

<p>-Hem derlenebilen hemde yorumlanabilen bir dil.</p>

<p>-Scala’nın kendi derleyicileri olmasına rağmen istenildiğinde Java Byte-Code üretebiliyor.(Bu sayede java kütüphanelerini, framework’lerini, tool’larını rahatlıkla kullanabiliyoruz)</p>

<p>-Scala’nın REPL (Read-Evaluate-Print Loop) denilen bir yorumlayıcısı var.  Bu yourmlayıcı  geliştirciye, yazdığı kodu hızlı bir şekilde çalıştırıp, çabuk bir şekilde geriş dönüş almayı sağlıyor.</p>

<p>-CLI(command-line interpreter) arayüzü mevcut.</p>

<p>⌘⌘ Scala’yı Vim, Emacs, Sublime Text gibi editörlerle yazabileceğiniz gibi Java IDEleri Netbeans, Eclipse, Intellij ile de yazabilirsiniz.</p>

<p>⌘⌘ Scala programcıları ilk zamanlar Maven kullansalarda, sonraları Simple Build Tool (aka SBT) isimli bir yapılandırma aracı kullanılmaya başlamışlar. Sbt ortamında yazdığınız kodları derlemenin ve çalıştırmanın yanında ‘console’ diyerek Scalanın etileşimli kabuğunda çabuk ve pratik bir şekilde işlemler yapabilirsiniz.</p>

<p>Şimdilik Scalaya dair bildiklerim bu kadar, yeni bilgiler öğrendikçe bu yazıyı güncellemeye çalışacağım. Yazıyı burada noktalamadan önce çoğu programcının yaptığı gibi Scala’ya ilk etapta “Hello World” ile başlayalım.</p>

<script src="https://gist.github.com/GlcEbru/884d2cd3e2758d10b6697f7be256b59a.js"></script>

 ]]></content>
</entry>


  <entry>
  <title type="text">Linux Yaz Kampı 2015</title>
  <link rel="alternate" type="text/html" href="http://localhost:3000/linux-yaz-kamp%C4%B1-2015.html" />
  <id>http://localhost:3000/linux-yaz-kampı-2015</id>
  <published>2015-08-29T18:07:19Z</published>
  <updated>2015-08-29T18:07:19Z</updated>
  <content type="html"><![CDATA[ <p>Herkese merhaba. Bu yazımda Bolu da düzenlenen Linux Yaz Kampı 2015’den izlenimlerimi ve öğrendiklerimi sizlerle paylaşacağım.
Baştan uyarmak isterim birazcık uzun ve keyifli bir yazı olacak :) Birde öğretici tabi :) Öncelikle belirtmeliyim eğer zamanınız
ve imkanınız varsa kesinlikle katılmalısınız. Öyle bir ortamı, dostlukları, hem öğrenirken hemde mutlu olduğunuz bir yer kolay kolay
bulunmuyor. Bende hissettim tabi bu kadar güzel olacağını Django ve Javascript ile Web Programlamaya Giriş kursuna başvurdum ve
kabul edildim :) 16 gün dolu dolu ve çok yoğun geçti. Akşam bilgisayarım ile uyuyup sabah kodlarla uyandım diyebilirim :) Html/css
ve JavaScripte giriş kısmını beş gün boyunca Aziz Arslan ve Eniz Gülek den aldık. Hem eğlenceli hemde öğretici bir eğitim olduğunu
söyleyebilirim :) Birkaç tane web sitesinin tasarımını ve responsive özelliğini yaptık. Benim için hem bildiğim konuları tekrar hemde
yeni birçok şey öğrendiğim beş gün oldu. Ardından 2 gün boyunca Üstün Özgür den ileri JavaScript dersleri aldık. Tabiri caizse eğer
Üstün Hocam esti geçti diyebilirim. Beyinlerimizde birazcık yanmış olabilir tabi :) Ama JavaScripti tam manasıyla kavradığımıza inanıyorum.
Üstün hocanın bu yoğun bilgi bombardımanından sonra Django’ yu nasıl toparlayacağız derken neyse ki korktuğumuz gibi olmadı :) Çünkü Python
çok tatlı bir dil ve hocalarımızda gayet iyi olunca 2 günde Python’ı temel olarak bitirdik. Ve Djangoya merhaba dedik :) Umut Karcı ve
Fatih Erikli hem anlattı hemde uygulayarak gösterdi. Bir hata ile karşılaştığımızda herbirimiz ile tek tek ilgilendiler. Eğitim sırasında
gruplara ayrılıp bir proje konusu belirledik. Eğitim bittiğinde ise her grubun kendine ait bir projesi vardı. Ortaya harika şeyler çıktı :)
Eğitim genel olarak böyle geçti. Ders çıkışlarında ve aralarda da Php ve Python arasında tatlı bir rekabet vardı. Lyk’nın geleneği bozulmadı
ve 16 gün boyunca birbirimize sataşıp durduk :) Sonunda ise kodların kardeşliği kazandı :) Yazının en altına bu atışmaya ve diğer günlere ait
resimleri bulabilirsiniz. Hatıra kısmı bittiğine göre bilgilendirici kısma geçebilirim artık :) Doğru bir şey mi düşündüm bilmiyorum ama
html/css ve Python’ a ait Türkçe kaynakların sayısının çok olduğunu gördüm. Bende size Türkçe kaynak bakımından yetersiz olduğunu düşündüğüm
İleri JavaScript ve Django da öğrendiklerimi anlatmaya karar verdim. Ve başlıyorum :)</p>

<h3 id="İleri-javascript">İleri JavaScript</h3>
<p>JavaScript nesne yönelimli, daha çok tarayıcılarda kullanılan dinamik bir programlama diliymiş. Ayrıca JavaScript prototip tabanlı, dinamik
türlere ve birinci sınıf fonksiyonlara sahipmiş. JavaScriptte değişkenler “var” adı ile belirtilir. Verinin türünü belirtmeye gerek yok.
Otomatik olarak algılıyormuş. Python gibi :)</p>

<p class="pull-center"><img src="http://localhost:3000/static/img/lyk2015-1.jpg" alt="Smithsonian Image" /></p>

<p>–&gt;Bu şekilde fonksiyonun içerisinde bir tanımlama yaptığımızda değişken sadece fonksiyon içerisinde tanımlıdır.</p>

<p class="pull-center"><img src="http://localhost:3000/static/img/lyk2015-2.jpg" alt="Smithsonian Image" /></p>

<p>–&gt;Değişkenlerin belirli olduğu yerlere scope(kapsam) denir. Yani değişkenlerin tanımlı olduğu aralıklardır.</p>

<p>»» 1 ve 5 numaralı kısımlarda değişkenler tanımlanmamıştır.
»» 2. kısımda alttaki diğer ifadelerin yazılmadığını varsayarsak; değişkenin başına var yazılmadığı için değişken dışarı taşıp global hale
gelmiştir. Programın herhangi bir yerinde kullanılabilir ancak önerilen bir kullanım değildir. “var emre” ifadesi eklendiğinde artık global
değil Undefined dır. Javascript “var” tanımlama kelimesini ilk kullanıldığı satıra taşır gibi düşünebiliriz.
»» 3 . seçenek de var ile değişken tanımlanmış ve sadece fonksiyon aralığında kullanılabilir. Var ifadesini bir kelepçe olarak da düşünebiliriz.
Değişkeni fonksiyon içerisine kelepçeler.
»» 4. kısımda ise değişkene bir değer atanmıştır.</p>

<p class="pull-center"><img src="http://localhost:3000/static/static/img/lyk2015-3.jpg" alt="Smithsonian Image" /></p>

<p>Eğer hem fonksiyonun içinde hemde global alanda bir değişken tanımlarsak biri diğerini gölgelemiş olacak ve program çalıştığında istediğimiz sonucu alamayacağız.
Bunun olmaması için değişken adlarının isimlendirilmesine ve tanımlanmasına dikkat etmeliyiz.</p>

<p>JavaScriptte 2 çeşit tepeye taşıma olayı gerçekleşir.
1)Var Hosting(Tepeye Taşıma):
Değişken il nerede kullanıldıysa var ifadesini oraya taşır.
2) Function Hosting:
Fonksiyonu alıp çağırıldığı yrin üzerine taşır.
Not: Burada bahsedilen taşıma olayı program içerisinde gerçekleştirilmez. Ama JavaScript öyle kabul eder. Daha açıklayıcı olması açısından böyle anlamak ve anlatmak
daha uygun.</p>

<p><code class="highlighter-rouge">Veri Türleri</code></p>

<p>-Array ► var dizi = [“Fenerbahçe”, “Beşiktaş”, “Galatasaray”, “5”, “7”];
-String ► “Ebru”, ‘Ebru’
-Number ► 1 , 1.2
-Boolean ► true, false
-Noan(Not a number)
-Null ► var x = null;
-Undefined ► var x;
-Object ► dictionary = {isim: “Ebru”, soyad: ”Güleç”, yas : 20};
-Function ► function(){ }</p>

<p>Dipçe: JavaScriptte objeye bağlanmış fonsiyona method denir.
Obje = Veri + Metod(Fonksiyon)
var foo = function(parameter){ }</p>

<p>Dipçe-2: JavaScriptte fonksiyonun değeri nasıl tanımlandığı ile değil nasıl çağırıldığı ile ilgilidir.
Şimdide JavaScript’in temel yapı taşlarından biri olan “this” den bahsetmek istiyrum. Bence this joker
eleman gibi bir şey. Can simidi de olabilir :) This de olay şu net bir anlamı yok. This tam olarak şuna
takabül ediyor diyemem. Çağırılma anında görevi belirleniyor dersek yanlış olmaz. Dizi 5 şekilde çağırabiliriz.</p>

<p>1)Fonksiyon olarak çağırma(all):
this = global
2)Metod olarak çağırma:
x.kos() ayse.kos()
this = x this = ayse
3)call ile çağırma:
fonksiyon.call(x,1,2,3)
fonksiyon(1,2,3){
this = x;}
4)new kullanarak çağırma:
5)bind bağlamak:</p>

<p><code class="highlighter-rouge">JavaScript ile Prototip Tabanlı Programlama</code>:
Daha önce nesne yönelimli programlama ile çok haşır neşir olmadığım için(sanıyorum ki bunun nedeni çömezliğimden )
JavaScriptte beynimi yakan kısımlardan biri olmuştur. Başta bu da nesi gibi içsel çığlıklarımın oluştuğu kullanım
alanını gördülçe haa iyiymiş ya dediğim güzel olay :) Dipçe: Yazının devamını getirmeden belirtmem gerek JavaScriptte
herşey birer nesnedir. Fonksiyonlar bile.
–&gt;C# ve Java gibi programlama dillerinde OOP temelini class keyword’ü oluşturmaktadır. Ancak JavaScript’te class
keyword’ü bulunmaz. Bunun yerine fonksiyon mantığıyla nesne yönelimi modellenir.</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">InsanListesi</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
<span class="k">this</span><span class="p">.</span><span class="nx">insanlar</span> <span class="o">=</span> <span class="p">[];</span>
<span class="p">};</span></code></pre></figure>

<p>–&gt;InsanListesi adında bir obje oluşturduk ve insanlar dizisini this ile belirttik.</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">InsanListesi</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">ekle</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">insan</span><span class="p">)</span> <span class="p">{</span>
<span class="k">this</span><span class="p">.</span><span class="nx">insanlar</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">insan</span><span class="p">);</span>
<span class="p">};</span></code></pre></figure>

<p>–&gt;InsanListesine bir prototype oluşturduk. Girilen insan verilerini insanlar adında boş diziye gönderecek. Prototype’lar özetle bir sınıfa ait olan ve her nesne
oluşturulurken değil, sadece bir kez oluşturulan nesnelerdir.Prototype’lar metod olmak zorunda da değildir. Değişken vb. nesne de olabilir.</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">insanListesi</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">InsanListesi</span><span class="p">();</span></code></pre></figure>

<p>–&gt;InsanListesine yeni bir nesne oluşturduk.</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">Insan</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">surname</span><span class="p">,</span> <span class="nx">age</span><span class="p">,</span> <span class="nx">type</span><span class="p">,</span> <span class="nx">takim</span><span class="p">)</span> <span class="p">{</span>
<span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
<span class="k">this</span><span class="p">.</span><span class="nx">surname</span> <span class="o">=</span> <span class="nx">surname</span><span class="p">;</span>
<span class="k">this</span><span class="p">.</span><span class="nx">age</span> <span class="o">=</span> <span class="nx">age</span><span class="p">;</span>
<span class="k">this</span><span class="p">.</span><span class="nx">type</span> <span class="o">=</span> <span class="nx">type</span><span class="p">;</span>
<span class="k">this</span><span class="p">.</span><span class="nx">takim</span> <span class="o">=</span> <span class="nx">takim</span><span class="p">;</span>
<span class="nx">insanListesi</span><span class="p">.</span><span class="nx">ekle</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
<span class="p">};</span></code></pre></figure>

<p>–&gt;Insan adında bir fonksiyon oluşturduk ve parametrelerini verdik. This ile bunları bağladık.</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">Insan</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">toggle</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
<span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">type</span> <span class="o">===</span> <span class="s2">"Ogrenci"</span><span class="p">)</span> <span class="p">{</span>
<span class="k">this</span><span class="p">.</span><span class="nx">type</span> <span class="o">=</span> <span class="s2">"Ogretmen"</span><span class="p">;</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
<span class="k">this</span><span class="p">.</span><span class="nx">type</span> <span class="o">=</span> <span class="s2">"Ogrenci"</span><span class="p">;</span>
<span class="p">}};</span></code></pre></figure>

<p>–&gt;Toggle bir obje görünür halde ise gizler,gizli haldeyse gösterir. Yukarıdaki kodda eğer ögrenci ise ogretmen yap. Ogretmen ise ogrenci yap demiş olduk.</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">Insan</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">toggle</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
<span class="k">new</span> <span class="nx">Insan</span><span class="p">(</span><span class="s2">"Ustun"</span><span class="p">,</span> <span class="s2">"Ozgur"</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="s2">"Ogretmen"</span><span class="p">,</span> <span class="s2">"BJK"</span><span class="p">);</span>
<span class="k">new</span> <span class="nx">Insan</span><span class="p">(</span><span class="s2">"Aytac"</span><span class="p">,</span> <span class="s2">"Genc"</span><span class="p">,</span> <span class="mi">22</span><span class="p">,</span> <span class="s2">"Ogrenci"</span><span class="p">,</span> <span class="s2">"FB"</span><span class="p">);</span>
<span class="k">new</span> <span class="nx">Insan</span><span class="p">(</span><span class="s2">"Burak"</span><span class="p">,</span> <span class="s2">"Guneli"</span><span class="p">,</span> <span class="mi">23</span><span class="p">,</span> <span class="s2">"Ogrenci"</span><span class="p">,</span> <span class="s2">"GS"</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">insanlar</span> <span class="o">=</span> <span class="p">[</span>
<span class="p">[</span><span class="s2">"Fatih"</span><span class="p">,</span> <span class="s2">"Guneli"</span><span class="p">,</span> <span class="mi">23</span><span class="p">,</span> <span class="s2">"Ogrenci"</span><span class="p">,</span> <span class="s2">"TS"</span><span class="p">],</span>
<span class="p">[</span><span class="s2">"Mehmet"</span><span class="p">,</span> <span class="s2">"Sargil"</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="s2">"Ogrenci"</span><span class="p">,</span> <span class="s2">"Bursa"</span><span class="p">],</span>
<span class="p">[</span><span class="s2">"Cuneyt"</span><span class="p">,</span> <span class="s2">"Elmas"</span><span class="p">,</span> <span class="mi">22</span><span class="p">,</span> <span class="s2">"Ogrenci"</span><span class="p">,</span> <span class="s2">"BJK"</span><span class="p">]</span>
<span class="p">];</span></code></pre></figure>

<p>–&gt; Yeni insanlarımızı ekledik.</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">insanlar</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">insan</span><span class="p">)</span> <span class="p">{</span>
<span class="nx">Insan</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">Insan</span><span class="p">.</span><span class="nx">prototype</span><span class="p">),</span> <span class="nx">insan</span><span class="p">);</span>
<span class="p">});</span></code></pre></figure>

<p>–&gt; forEach kısmen girilen insan modellerini parçalayıp insan prototipine ekliyor.</p>

<p>Sonrasın da fonksiyonel programlama da for, forEach, map ve map+filter karşılaştırması yaptık. Burayı uzun uzadıya anlatmak yerine örenkler üzerinden gitmeyi tercih ediyorum.
1)Sayıların karesini alma:
var sayilar = [1, 2, 3, 4, 5, 6, 7]
For:
var kareler = [ ];
for (var i=0; i &lt; sayilar.lenght, i++){
kareler[i] = sayilar[i] * sayilar[i];
}
forEach:
var kareler = [ ];
sayilar.forEach(function(sayi)){
kareler.push(sayi<em>sayi)
}
map:
var kareler = sayilar.map(function(sayi)){
return sayi * sayi;
}
2)Karesi 9’a bölünen sayıların karesini bul
for:
var kareler = [ ];
for( var i= 0; i&lt;sayilar.lenght; i++){
if(karesi % 9 ===0)
kareler.push(karesi);
}
forEach:
var kareler= [ ];
sayilar.forEac
h(function(sayi)){
if(sayi = sayi %9 ===0){
kareler.push(sayi</em>sayi)
}
Map + Filter:
var kareler = sayılar.map(function(sayi)){
return sayi * sayi</p>

<p class="pull-center"><img src="http://localhost:3000/static/img/lyk2015-4.jpg" alt="Smithsonian Image" /></p>

<p>filter(function(kare){
return kare % 9 === 0;}
3) Karesi 9’a bölünen sayıları bul
for:
for(kareler.push(sayilar[i])
forEach:
kareler.push(sayi)
map:
filter(function(sayi)){
return sayi * sayi % 9 === 0;
}
Reduce: Bir listeyi özetliyor. Tek sonuç çıkartıyor.
var toplam = sayilar.reduce(function(a,b)){
return a + b;
}</p>

<p class="pull-center"><img src="http://localhost:3000/static/img/lyk2015-5.jpg" alt="Smithsonian Image" /></p>

<p>Bu öğrendiklerimizi kullanarak imdb benzeri bir proje yaptık.</p>

<h3 id="django">Django</h3>

<p>Django konusuna girmeden önce size Virtualenv den bahsetmek istiyorum. Nedir bu Virtualenv?
Virtualenv ile bilgisayarımızda sanal bir ortam oluşturarak uygulamamızı bilgisayarımızın geri kalanından soyutluyoruz. Tam anlamıyla bağımsız Python geliştirme ortamı desek
daha uygun olur sanırım. Djangoda da proje geliştirmeden önce virtualenv yi kuruyoruz.
–&gt;pip install virtualenv
diyerek kuruyoruz.
–&gt;virtualenv env
diyerek sanal geliştirme ortamımızı oluşturuyoruz.
Oluşturduğumuz klasöre gidip onu aktif ediyoruz.
–&gt; source blog/bin/activate
–&gt;pip3 install django
İçerisine djangoyu kuruyoruz.
–&gt; django-admin.py startproject projeAdi
Projemizi başlatıyor ve bir isim veriyoruz.
ProjeAdi
| - - projeAdi
| | - - <strong>init</strong>.py
| | - - settings.py
| | - - urls.py
| ‘ - - wsgi.py
‘ - - manage.py
–&gt;Projemizi başlattıkdan sonra bu dosyalar oluşuyor.
∠ setting.py: Projenin ayarlarının yapıldığı dosya
∠ urls.py: Sitenin url’lerinin belirlendiği kısım
∠ manage.py: Projenin yürütüldüğü script
→ python3 manage.py startapp blog
Ugulama oluşturuyoruz.
blog
| - - <strong>init</strong>.py
| - - modelsipy
| - -tests.py
‘ - - views.py
Oluşturduğumuz uygulamamız Model, View ve Template ögelerinden oluşur.</p>

<p class="pull-center"><img src="http://localhost:3000/static/img/lyk2015-6.jpg" alt="Smithsonian Image" /></p>

<p>Model: Uygulamamızın veritabanı ile ilgili kısmıdır. Her model veritabanındaki bir tablo ile eşleşir.
View :Kullanıcıya gösterilen ve kullanıcıdan yanıt alınan katmandır.
Temlate: Kullanıcıya verilecek olan yanıtın işlendiği kısımdır. Template’lar HTML snuçlar üretmeyi kolaylaştırır.
Urls kısmı ise projemizdeki urls’lerin belirlendiği kısımdır.
–&gt;python3 manage.py migrate
Veritabanı oluşturuyoruz.
–&gt;python3 manage.py createsuperuser
Super user oluşturuyoruz ve bir şifre belirliyoruz. Ardından;
–&gt;python3 manage.py runserver
dedikten sonra django başarılı bir şekilde çalışmış oluyor ve karşımıza şu sayfa çıkıyor.</p>

<p class="pull-center"><img src="http://localhost:3000/static/img/lyk2015-7.jpg" alt="Smithsonian Image" /></p>

<p>Bu ekrandan sonra models, views, templates , url kısımlarımızı düzenliyoruz ve projemiz çalışmaya hazır :) Bundan sonraki kısımları tek tek anlatamayacağım çünkü yeterince
uzun bir yazı oldu. Bu kısımları farklı bir başlık altında detaylıca anlatmayı düşünüyorum. JavaScripttide aynı şekilde. Ama ondan önce ikisinde de uzmanlaşmam gerek :)
İlgili Görseller :)</p>

<p class="pull-center"><img src="http://localhost:3000/static/img/lyk2015-8.jpg" alt="Smithsonian Image" /></p>
<p class="pull-center"><img src="http://localhost:3000/static/img/lyk2015-9.jpg" alt="Smithsonian Image" /></p>
<p class="pull-center"><img src="http://localhost:3000/static/img/lyk2015-10.jpg" alt="Smithsonian Image" /></p>
 ]]></content>
</entry>


  <entry>
  <title type="text">11. Bilmök</title>
  <link rel="alternate" type="text/html" href="http://localhost:3000/bilmok-post.html" />
  <id>http://localhost:3000/bilmok-post</id>
  <published>2015-03-15T17:07:19Z</published>
  <updated>2015-03-15T17:07:19Z</updated>
  <content type="html"><![CDATA[ <p>Bu yıl 11. si Ankara üniversitesinde düzenlenen Bilmök hem konferans konularıyla hemde konuşmacılarıya dikkat çekiciydi. Özellikle ilk gün,  yazılım geliştiricisi, GNU Projesi ve Özgür Yazılım Vakfı’nın kurucusu  Richard Stallman Bilmökteydi. Bu cidden büyük bir olaydı. Ben ikinci gün katılabildiğim için konuşmasını dinleyemedim.  Ama öğrendiğim kadarıyla etkili bir sunum yapmış.
Katıldığım günden bahsedecek olursam. Sabah saatlerinde oraya ulaştık. Kalabalık ve kargaşa vardı. Vakit kaybetmeden konuşmaların yapılacağı salona ulaştık. Salona girdiğimizde Fatoş Yarman Vural ve Yapay zeka, doğal zeka, ortak zeka sunumu vardı. Sunumdan sonra düşündüğüm tek şey ise kesinlikle bu alanda çalışmalıydım oldu. Ardından kariyer olarak mobil uygulama geliştirme sunumuyla Ali Ercan’ın sunumunu dinledik. O sunum bittikten sonra Sinan Kalkan Robotlarda Zekanın 3 Silahşörleri: Algı,Eylem ve Dil adlı sunumunu dinledik. Yine içeriği ilgi çekiciydi. Programlanmış robotların neler yapabileceğini gösterdi. Bizde şaşkın bir ifadeyle seyrettik.</p>

<p>Öğle arasından sonra Can Yıldızlının Siber Güvenlik sunumu vardı. Tam da sunumun olduğu sırada Bilmök’ün resmi web sitesi indexlendi ve birkaç dakikalık karışıklık yaşandı. Çok geçmeden düzeltildi tabi. Ama konu güvenlik olunca Can abinin Bimök ekibine ufak bir sitemi oldu. Can Yıldızlı’nın bu ilgi çekici sunumundan sonra Network ve Java ile ilgili sunumlarını dinledik. Ve 12. Bilmök adayları sunumlarını yaptı. Böylelikle ikinci gün bitmiş oldu. Genel itibariyle güzel bir etkinlikti. Öğrendiğim ve örnek almam gereken şeyleri gördüm.  Bu arada 12. Bilmök’ü Harran Üniversitesi kazandı. Umarım onada katılabilirim :)</p>
 ]]></content>
</entry>


  <entry>
  <title type="text">II. Programlama Günleri</title>
  <link rel="alternate" type="text/html" href="http://localhost:3000/programlama-gunleri.html" />
  <id>http://localhost:3000/programlama-gunleri</id>
  <published>2015-03-01T17:07:19Z</published>
  <updated>2015-03-01T17:07:19Z</updated>
  <content type="html"><![CDATA[ <p>Karabük Üniversitesin de Bilişim Teknolojileri Kulübü tarafından düzenlenen ve benimde ekibin içerisinde yer aldığım  II. Programlama Günleri keyifli bir şekilde son buldu. Program nasıl geçti derseniz; sadece muhteşemdi diyebilirim. Evet bazı eksiklikler aksamalar vardı ama onlarla bile çok güzeldi. 
  İlk gün Uğur Özyılmazel ile yazılımcı kimdir? nedir? üzerine konuşuldu. Ardından Serdar Doğruyol  Ruby programlama dili hakkında bizlere bilgi verdi.(Ayrıca daha sonradan Serdar abiden Rails Girls için söz aldık :) ) Ben dışarıda görevli olduğum için bu iki güzel konuşmayı kaçırdım ama konuşmalar kaydedildiği için sonradan izlerim rahatlığıda vardı. Ve kesinlikle izleyeceğim. Öğle arasının ardından Volkan Kanat  Arduino dan bahsetti. Arduino uzak olduğum bir konu olmasına rağmen ilgimi çekti diyebilirim. Arduino ile yapabileceklerimiz hayal gücünüze kalmış. Ve ortaya birbirinden eğlenceli projeler rtaya çıkmış. İlerde bir gün ilgilenmeyi bile düşünebilirim :). Volkan abiden sonra Kodcu.com da yazar olan Rahman Usta’nın Java ve WebSocket programlama üzerine olan sunumunu dinledik. WebSocket Programlama hakkında doğru dürüst bilgim olmadığı için anlamak konusunda biraz zorlandım. Ama rahman abi bizlere faydalı olmak, birşeyler öğretme için elinden geleni yaptı. İlk gün bütün koşturmacasıyla ve yoruculuğuyla böylece bitti.</p>

<p class="pull-center"><img src="http://localhost:3000/static/img/programlama-gunleri.jpg" alt="Smithsonian Image" /></p>

<p>İkinci gün ise Hakan Uygun ile tüm hızıyla kaldığı yerden devam etti. Hakan abinin sunumunu Akademik Bilişimde de dinlemiştim. Çok güzel bir sunum olacağını biliyordum yani. Ve tabiki yanılmadım. Hakan abi bütün o enerjisiyle konuşmasını yaptı. Bize de dinlemek ve alkışlamak düştü :). Hakan abiden sonra Halit Alptekin Python Programlama dilinden bahsettim. Python’ ı öğrenmek istediğim için dikkatli bir şekilde dinledim ve çok şey öğrendim. Ve program Hüseyin Mert ile bütün coşkusuyla devam etti. Hüseyin abi bize PostgreSQL den(ki bir türlü doğru teleffuz edemiyorum ama ne olduğunu öğrendim :) ) bahsetti. Neden özgür yazılım kullanmamız gerektiğini ve milyonlarca doların ülkemizde kalması gerektiğini mizahi bir üslupla anlattı. Farklı bir anlatım tarzı vardı ilgi çekiciydi yani. O kadar ki sunumda hepimiz kahkahalarla güldük :). Ardından Fehmi Can Sağlam’ın Fonksiyonel reaktif programlama üzerine sunumu vardı. Arka tarafta yapılması gereken birkaç şey olduğu için bu sunumun hepsini dinleyemedim malesef. Son olarak Arif Erdem’in Web Tasarım üzerine bir sunumu vardı. Kendisiyle dışarda tanışmıştım ama dersim olduğu için sunuma kalamadım. Akşam Karabük’te misafir olarak kalan konuklar ile keyifli bir yemek yedik. Kafamda olan bütün soruları her birine ayrı ayrı sordum. Hepsi de ilgili bir şekilde sorularıma tek tek cevap verdi, yol gösterdi. Bizim için ellerinden gelen herşeyi yaptılar. Hatta daha sonrasında yardımcı olacaklarına da eminim. Bütün konuklarımızda gördüğüm tek şey işlerini severek büyük bir aşkla yaptıklarıydı. Onları tanımak benim için büyük bir zevkti. Birgün onlarla çalışmayı gerçekten isterim, bu eminim ki çok eğlenceli olacaktır :)</p>
 ]]></content>
</entry>


  <entry>
  <title type="text">Akademik Bilişim 2015</title>
  <link rel="alternate" type="text/html" href="http://localhost:3000/akademik-bilisim-2015.html" />
  <id>http://localhost:3000/akademik-bilisim-2015</id>
  <published>2015-02-09T17:07:19Z</published>
  <updated>2015-02-09T17:07:19Z</updated>
  <content type="html"><![CDATA[ <p>Merhaba arkadaşlar geçenlerde Akademik Bilişim 2015 Konferansları düzenlendi. 4 gün boyunca farklı birçok alanda eğitimler verildi. Bende Linux’a Giriş eğitimine katıldım. Bu yazımda orada öğrendiklerimi sizlerle paylaşacağım. Şunu da belirtmeliyim kesinlikle kaçırılmaması gereken bir organizasyondu. Eğitmenimiz de Levent Emmungil di. Neyse fazla uzatmadan konuya gireyim.</p>

<p>İlk gün daha çok teorik bilgiler üzerinden gittik. İşletim sistemi nedir, aralarındaki farklar gibi. Öğrendiklerim ile ilgili sizlere bir döküman hazırladım ona buradan ulaşabilirsiniz. Ardından bir Linux dağıtımı olan Ubuntuyu VirtualBox üzerinden kurduk. Kurulumun nasıl yapılacağını buradan  öğrenebilirsiniz. Eğer benim gibi bir windows kullanıcı iseniz ve diski elle bölümlendirecekseniz dikkat etmenizz gereken 2 nokta var. Birincisi swap(takas) alanı. Ram yetersiz kaldığında bilgisayar bu alana başvurur ve gereklidir. Dosya sistemi yoktur. İkincisi bağlanma noktası. Linux’un çalışma prensibi ile ilgilidir.</p>

<p>Daha sonra komut satırında basit düzeyde komutlar öğrendik. Ki komut satırında herşeyi yapabiliriz bir kısıtlamamız yok. Eğer hata mesajı almıyorsak o işlem tamamlanmış demektir. Öğrendiğimiz komutlar;</p>

<figure class="highlight"><pre><code class="language-text" data-lang="text">  /$ = Normal kullanıcı
  /# = Ana yönetici(Super user)
  mkdir = Dizin oluşturur.(Linux da Klasör ve klasör birbirinden farklı şeylerdir.)
  ls = List'in kısaltmasıdır. Klasörleri listeler.
  ls -l = Ayrıntılı olarak listeler.( -l bir parametredir.)
  Klasör ise başında 'd' vardır. Dosya ise '-' vardır.
  sudo = Super user gibi yap. Root komutu.
  apt-get = Paket yükleme, güncelleme kaldırmada ullanırız.
  sudo apt-get install gparted = Programı yükle.
  sudo apt-get remove gparted = Programı kaldır.
  top = Sistemin kullanımını listeler.
  shutdown = Sistemi kapatmak reset atmak için kullanılır. 
  Parametreleriyle kullanılırsa belirli bir zaman sonrada o işlem gerçekleştirilebilir.
  cp = Kopyalama.
  cron = Tekrarlanan işlemlerde kullanılır. Örneğin sunucu yedekleme gibi.
  crontab -e = Tekrarlanacak işlemin belirtildiği kısım.
  /* * * * * Çalıştırılacak komut
  /1. * = Dakika
  /2. * = Saat
  /3. * = Ayın günleri
  /4. * = Ay
  /5. * = Haftanın günleri
  Örnek = 16 15 7 5 3 cp calisma/* yedek
  touch = Dizin oluşturur.
  chown = Dosyanın haklarını değiştirir.
  rsync = Benim tabirimle süper üper kopyala, yedekleme.
  Not: Komutun tamamını bilmiyorsak Tab tuşuna basarız. 2 defa basarsak alternatifleri gösterir.

  </code></pre></figure>

<p>Yukarıdaki komutları kullanarak apache web sunucu, wordpress ve kişisel bulut sunucu owncloud ‘u yükleyip kurduk.
Daha fazla komuta buradan ulaşabilirsiniz.</p>

<p>Kurs bitiminde kısacık dört günün nasıl geçtiğini anlayamadım. Çok güzel şeyler öğrendim, geleceğime yön verecek insanlarla tanıştım, vay be adamlar neler yapıyor dedim ve özgür yazılım ile tanışma fırsatı buldum. Artık bende bir penguenim :) Linux’u ara vermeden öğrenmeye devam edeceğim. Bunun için internette güzel kaynakar var. E mail listeleri, özgür yazılım dergileri gibi. Öğrendiklerimide sizlerle paylaşacağım umarım faydalı olabilirim.</p>

<figure class="highlight"><pre><code class="language-text" data-lang="text">http://www.sourceforge.net</code></pre></figure>

<p>-Açık kaynaklı yazılımların toplandığı yer.</p>

<figure class="highlight"><pre><code class="language-text" data-lang="text">http://www.distrowatch.com</code></pre></figure>

<p>-Linux dağıtımlarının tutulduğu yer.</p>
 ]]></content>
</entry>



</feed>
